"use strict";(this.webpackChunkHLWidget=this.webpackChunkHLWidget||[]).push([[8541],{58541:(e,t,n)=>{n.d(t,{coinbaseWallet:()=>s,safe:()=>u});var i=n(34982),a=n(63926),c=n(89675),r=n(63827),o=n(61566);function s(e={}){return"3"===e.version||e.headlessMode?function(e){let t,h,d,u,l;return(0,i.U)(i=>({id:"coinbaseWalletSDK",name:"Coinbase Wallet",rdns:"com.coinbase.wallet",type:s.type,async connect({chainId:e}={}){try{const t=await this.getProvider(),n=(await t.request({method:"eth_requestAccounts"})).map(e=>(0,c.b)(e));d||(d=this.onAccountsChanged.bind(this),t.on("accountsChanged",d)),u||(u=this.onChainChanged.bind(this),t.on("chainChanged",u)),l||(l=this.onDisconnect.bind(this),t.on("disconnect",l));let i=await this.getChainId();if(e&&i!==e){const t=await this.switchChain({chainId:e}).catch(e=>{if(e.code===r.vx.code)throw e;return{id:i}});i=t?.id??i}return{accounts:n,chainId:i}}catch(e){if(/(user closed modal|accounts received is empty|user denied account)/i.test(e.message))throw new r.vx(e);throw e}},async disconnect(){const e=await this.getProvider();d&&(e.removeListener("accountsChanged",d),d=void 0),u&&(e.removeListener("chainChanged",u),u=void 0),l&&(e.removeListener("disconnect",l),l=void 0),e.disconnect(),e.close()},async getAccounts(){const e=await this.getProvider();return(await e.request({method:"eth_accounts"})).map(e=>(0,c.b)(e))},async getChainId(){const e=await this.getProvider(),t=await e.request({method:"eth_chainId"});return Number(t)},async getProvider(){if(!h){const a=await(async()=>{const{default:e}=await n.e(7194).then(n.t.bind(n,37194,19));return"function"!=typeof e&&"function"==typeof e.default?e.default:e})();t=new a({...e,reloadOnDisconnect:false});const c=t.walletExtension?.getChainId(),r=i.chains.find(t=>e.chainId?t.id===e.chainId:t.id===c)||i.chains[0],o=e.chainId||r?.id,s=e.jsonRpcUrl||r?.rpcUrls.default.http[0];h=t.makeWeb3Provider(s,o)}return h},async isAuthorized(){try{return!!(await this.getAccounts()).length}catch{return!1}},async switchChain({addEthereumChainParameter:e,chainId:t}){const n=i.chains.find(e=>e.id===t);if(!n)throw new r.ch(new a.nk);const c=await this.getProvider();try{return await c.request({method:"wallet_switchEthereumChain",params:[{chainId:(0,o.cK)(n.id)}]}),n}catch(i){if(4902===i.code)try{let i,a;i=e?.blockExplorerUrls?e.blockExplorerUrls:n.blockExplorers?.default.url?[n.blockExplorers?.default.url]:[],a=e?.rpcUrls?.length?e.rpcUrls:[n.rpcUrls.default?.http[0]??""];const r={blockExplorerUrls:i,chainId:(0,o.cK)(t),chainName:e?.chainName??n.name,iconUrls:e?.iconUrls,nativeCurrency:e?.nativeCurrency??n.nativeCurrency,rpcUrls:a};return await c.request({method:"wallet_addEthereumChain",params:[r]}),n}catch(e){throw new r.vx(e)}throw new r.ch(i)}},onAccountsChanged(e){0===e.length?this.onDisconnect():i.emitter.emit("change",{accounts:e.map(e=>(0,c.b)(e))})},onChainChanged(e){const t=Number(e);i.emitter.emit("change",{chainId:t})},async onDisconnect(e){i.emitter.emit("disconnect");const t=await this.getProvider();d&&(t.removeListener("accountsChanged",d),d=void 0),u&&(t.removeListener("chainChanged",u),u=void 0),l&&(t.removeListener("disconnect",l),l=void 0)}}))}(e):function(e){let t,h,d,u;return(0,i.U)(i=>({id:"coinbaseWalletSDK",name:"Coinbase Wallet",rdns:"com.coinbase.wallet",type:s.type,async connect({chainId:e,...t}={}){try{const n=await this.getProvider(),i=(await n.request({method:"eth_requestAccounts",params:"instantOnboarding"in t&&t.instantOnboarding?[{onboarding:"instant"}]:[]})).map(e=>(0,c.b)(e));h||(h=this.onAccountsChanged.bind(this),n.on("accountsChanged",h)),d||(d=this.onChainChanged.bind(this),n.on("chainChanged",d)),u||(u=this.onDisconnect.bind(this),n.on("disconnect",u));let a=await this.getChainId();if(e&&a!==e){const t=await this.switchChain({chainId:e}).catch(e=>{if(e.code===r.vx.code)throw e;return{id:a}});a=t?.id??a}return{accounts:i,chainId:a}}catch(e){if(/(user closed modal|accounts received is empty|user denied account|request rejected)/i.test(e.message))throw new r.vx(e);throw e}},async disconnect(){const e=await this.getProvider();h&&(e.removeListener("accountsChanged",h),h=void 0),d&&(e.removeListener("chainChanged",d),d=void 0),u&&(e.removeListener("disconnect",u),u=void 0),e.disconnect(),e.close?.()},async getAccounts(){const e=await this.getProvider();return(await e.request({method:"eth_accounts"})).map(e=>(0,c.b)(e))},async getChainId(){const e=await this.getProvider(),t=await e.request({method:"eth_chainId"});return Number(t)},async getProvider(){if(!t){const a="string"==typeof e.preference?{options:e.preference}:{...e.preference,options:e.preference?.options??"all"},{createCoinbaseWalletSDK:c}=await n.e(1381).then(n.bind(n,1381)),r=c({...e,appChainIds:i.chains.map(e=>e.id),preference:a});t=r.getProvider()}return t},async isAuthorized(){try{return!!(await this.getAccounts()).length}catch{return!1}},async switchChain({addEthereumChainParameter:e,chainId:t}){const n=i.chains.find(e=>e.id===t);if(!n)throw new r.ch(new a.nk);const c=await this.getProvider();try{return await c.request({method:"wallet_switchEthereumChain",params:[{chainId:(0,o.cK)(n.id)}]}),n}catch(i){if(4902===i.code)try{let i,a;i=e?.blockExplorerUrls?e.blockExplorerUrls:n.blockExplorers?.default.url?[n.blockExplorers?.default.url]:[],a=e?.rpcUrls?.length?e.rpcUrls:[n.rpcUrls.default?.http[0]??""];const r={blockExplorerUrls:i,chainId:(0,o.cK)(t),chainName:e?.chainName??n.name,iconUrls:e?.iconUrls,nativeCurrency:e?.nativeCurrency??n.nativeCurrency,rpcUrls:a};return await c.request({method:"wallet_addEthereumChain",params:[r]}),n}catch(e){throw new r.vx(e)}throw new r.ch(i)}},onAccountsChanged(e){0===e.length?this.onDisconnect():i.emitter.emit("change",{accounts:e.map(e=>(0,c.b)(e))})},onChainChanged(e){const t=Number(e);i.emitter.emit("change",{chainId:t})},async onDisconnect(e){i.emitter.emit("disconnect");const t=await this.getProvider();h&&(t.removeListener("accountsChanged",h),h=void 0),d&&(t.removeListener("chainChanged",d),d=void 0),u&&(t.removeListener("disconnect",u),u=void 0)}}))}(e)}s.type="coinbaseWallet";var h=n(98517),d=n(35905);function u(e={}){const{shimDisconnect:t=!1}=e;let a,r;return(0,i.U)(i=>({id:"safe",name:"Safe",type:u.type,async connect(){const e=await this.getProvider();if(!e)throw new h.N;const n=await this.getAccounts(),a=await this.getChainId();return r||(r=this.onDisconnect.bind(this),e.on("disconnect",r)),t&&await(i.storage?.removeItem("safe.disconnected")),{accounts:n,chainId:a}},async disconnect(){const e=await this.getProvider();if(!e)throw new h.N;r&&(e.removeListener("disconnect",r),r=void 0),t&&await(i.storage?.setItem("safe.disconnected",!0))},async getAccounts(){const e=await this.getProvider();if(!e)throw new h.N;return(await e.request({method:"eth_accounts"})).map(c.b)},async getProvider(){if("undefined"!=typeof window&&window?.parent!==window){if(!a){const{default:t}=await n.e(8222).then(n.bind(n,58222)),i=new t(e),c=await(0,d.w)(()=>i.safe.getInfo(),{timeout:e.unstable_getInfoTimeout??10});if(!c)throw new Error("Could not load Safe information");const r=await(async()=>{const e=await n.e(3205).then(n.t.bind(n,53205,19));return"function"!=typeof e.SafeAppProvider&&"function"==typeof e.default.SafeAppProvider?e.default.SafeAppProvider:e.SafeAppProvider})();a=new r(c,i)}return a}},async getChainId(){const e=await this.getProvider();if(!e)throw new h.N;return Number(e.chainId)},async isAuthorized(){try{return(!t||!await(i.storage?.getItem("safe.disconnected")))&&!!(await this.getAccounts()).length}catch{return!1}},onAccountsChanged(){},onChainChanged(){},onDisconnect(){i.emitter.emit("disconnect")}}))}u.type="safe"}}]);
//# sourceMappingURL=8541.widget.iife.js.map