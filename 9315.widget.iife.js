if(void 0===process)var process={env:{NODE_ENV:"production"},browser:!0,version:"",versions:{}};(this.webpackChunkHLWidget=this.webpackChunkHLWidget||[]).push([[9315],{29315:(e,a,t)=>{t.d(a,{offchainLookup:()=>g,offchainLookupSignature:()=>w});var s=t(84094),r=t(64961),n=t(59658),o=t(61289);class c extends n.C{constructor({callbackSelector:e,cause:a,data:t,extraData:s,sender:r,urls:n}){super(a.shortMessage||"An error occurred while fetching for an offchain result.",{cause:a,metaMessages:[...a.metaMessages||[],a.metaMessages?.length?"":[],"Offchain Gateway Call:",n&&["  Gateway URL(s):",...n.map(e=>`    ${(0,o.I)(e)}`)],`  Sender: ${r}`,`  Data: ${t}`,`  Callback selector: ${e}`,`  Extra data: ${s}`].flat(),name:"OffchainLookupError"})}}class d extends n.C{constructor({result:e,url:a}){super("Offchain gateway response is malformed. Response data must be a hex value.",{metaMessages:[`Gateway URL: ${(0,o.I)(a)}`,`Response: ${(0,r.A)(e)}`],name:"OffchainLookupResponseMalformedError"})}}class i extends n.C{constructor({sender:e,to:a}){super("Reverted sender address does not match target contract address (`to`).",{metaMessages:[`Contract address: ${a}`,`OffchainLookup sender address: ${e}`],name:"OffchainLookupSenderMismatchError"})}}var u=t(98397),l=t(95884),p=t(8669),f=t(1175),h=t(43421),y=t(74924),m=t(36416);const w="0x556f1830",b={name:"OffchainLookup",type:"error",inputs:[{name:"sender",type:"address"},{name:"urls",type:"string[]"},{name:"callData",type:"bytes"},{name:"callbackFunction",type:"bytes4"},{name:"extraData",type:"bytes"}]};async function g(e,{blockNumber:a,blockTag:t,data:r,to:n}){const{args:o}=(0,l.W)({data:r,abi:[b]}),[d,u,y,w,g]=o,{ccipRead:C}=e,x=C&&"function"==typeof C?.request?C.request:k;try{if(!(0,f.h)(n,d))throw new i({sender:d,to:n});const r=u.includes(m.J)?await(0,m.X)({data:y,ccipRequest:x}):await x({data:y,sender:d,urls:u}),{data:o}=await(0,s.T)(e,{blockNumber:a,blockTag:t,data:(0,h.xW)([w,(0,p.h)([{type:"bytes"},{type:"bytes"}],[r,g])]),to:n});return o}catch(e){throw new c({callbackSelector:w,cause:e,data:r,extraData:g,sender:d,urls:u})}}async function k({data:e,sender:a,urls:t}){let s=new Error("An unknown error occurred.");for(let n=0;n<t.length;n++){const o=t[n],c=o.includes("{data}")?"GET":"POST",i="POST"===c?{data:e,sender:a}:void 0,l="POST"===c?{"Content-Type":"application/json"}:{};try{const t=await fetch(o.replace("{sender}",a.toLowerCase()).replace("{data}",e),{body:JSON.stringify(i),headers:l,method:c});let n;if(n=t.headers.get("Content-Type")?.startsWith("application/json")?(await t.json()).data:await t.text(),!t.ok){s=new u.Ci({body:i,details:n?.error?(0,r.A)(n.error):t.statusText,headers:t.headers,status:t.status,url:o});continue}if(!(0,y.q)(n)){s=new d({result:n,url:o});continue}return n}catch(e){s=new u.Ci({body:i,details:e.message,url:o})}}throw s}}}]);
//# sourceMappingURL=9315.widget.iife.js.map